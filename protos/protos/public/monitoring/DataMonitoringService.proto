syntax = "proto3";

package ai.verta.monitoring;
option go_package = "github.com/VertaAI/modeldb/protos/gen/go/protos/public/monitoring";

option java_multiple_files = true;

import "google/api/annotations.proto";
import "common/CommonService.proto";

// Aggregate data formats
message CountPerNGram {
  repeated ListString keys = 1;
  repeated uint64 counts = 2;
}

message ListString {
  repeated string item = 1;
}

message FloatHistogram {
  repeated float bucket_limits = 1;
  repeated uint64 bucket_counts = 2;
}

message DiscreteHistogram {
  repeated string labels = 1;
  repeated uint64 bucket_counts = 2;
}

message Statistics {
  float mean = 1;
  float standardDeviation = 2;
}

// Profiler, ProfilerInstance, ProfiledEntity

message Profiler {
  string id = 1;
  string name = 2;
  common.Artifact lambdaClass = 3;
}

// Instantiated Profiler.  Combines the profiler definition with the runtime arguments it requires.
message ProfilerInstance {
  string id = 1;
  string name = 2; // It seems like a user might want to name each instance, in case they have two instance of the same class attached to an entity with different params
  Profiler profiler = 3;
  repeated common.KeyValue arguments = 4;
}

// Combines an entity, endpoint, metadata, and the profiler instances in use
message ProfiledEntity {
  string id = 1;
  string name = 2;
  string entity_id = 3; // encoded domain-specific identifier (ARN, GCP resource name, or Verta entity key)
  string endpoint_id = 4; // encoded domain-specific identifier (ARN, GCP resource name, or Verta entity key).
  repeated common.KeyValue metadata = 5;
  repeated ProfilerInstance profilers = 6;
}

// ProfiledAggregate and ProfiledAggregateBatch

message ProfiledAggregate {
  ProfiledEntity profiled_entity = 1;
  string profiler_instance_id = 2;
  oneof aggregate {
    CountPerNGram count_per_ngram = 3;
    FloatHistogram float_histogram = 4;
    DiscreteHistogram discrete_histogram = 5;
    Statistics statistics = 6;
  }
}

message ProfiledAggregateBatch {
  repeated ProfiledAggregate aggregates = 1;
}

// Profiler CRUD

message GetProfilerRequest {
  string id = 1;

  message Response {
    Profiler profiler = 1;
  }
}

message CreateProfilerRequest {
  string id = 1;
  string name = 2;
  common.Artifact lambda = 3;

  message Response {
    Profiler profiler = 1;
  }
}

message UpdateProfilerRequest {
  string id = 1;
  string name = 2;
  common.Artifact lambda = 3;

  message Response {
    Profiler profiler = 1;
  }
}

message DeleteProfilerRequest {
  string id = 1;

  message Response {
  }
}

message ListProfilersRequest {
  message Response {
    repeated Profiler profilers = 1;
  }
}

// ProfilerSet CRUD

message GetProfilerInstanceRequest {
  string id = 1;

  message Response {
    ProfilerInstance profiler_set = 1;
  }
}

message CreateProfilerInstanceRequest {
  string id = 1;
  string name = 2;
  string profiler_id = 3;

  message Response {
    ProfilerInstance profiler_instance = 1;
  }
}

message UpdateProfilerInstanceRequest {
  string id = 1;
  string name = 2;

  message Response {
    ProfilerInstance profiler_instance = 1;
  }
}

message DeleteProfilerInstanceRequest {
  string id = 1;

  message Response {
  }
}

message ListProfilerInstancesRequest {
  oneof filterTo {
    string profiler_id = 1;
    string profiled_entity_id = 2;
  }

  message Response {
    repeated ProfilerInstance profiler_instances = 1;
  }
}

// ProfiledEntity CRUD

message GetProfiledEntityRequest {
  string profile_entity_id = 1;

  message Response {
    ProfiledEntity profiled_entity = 1;
  }
}

message CreateProfiledEntityRequest {
  string name = 1;
  string entity_id = 2; // encoded domain-specific identifier (ARN, GCP resource name, or Verta entity key)
  string endpoint_id = 3; // encoded domain-specific identifier (ARN, GCP resource name, or Verta entity key).
  common.KeyValue metadata = 4;
  string profiler_instance_id = 5;

  message Response {
    ProfiledEntity profiled_entity = 1;
  }
}

message UpdateProfiledEntityRequest {
  string profiled_entity_id = 1;
  string name = 2;

  message Response {
    ProfiledEntity profiled_entity = 1;
  }
}

message DeleteProfiledEntityRequest {
  string profiled_entity_id = 1;
  message Response {
  }
}

message ListProfiledEntitiesRequest {
  // Nullable filters, applied if they are provided.
  string name = 1;
  string entity_id = 2;
  string endpoint_id = 3;
  common.KeyValue metadata = 4;

  message Response {
    repeated ProfiledEntity profiled_entities = 1;
  }
}

// Aggregate Data Fetching

message GetAggregateRequest {
  string profiled_entity_id = 1;
  string profiler_id = 2;
  uint64 start_time_millis = 3;
  uint64 end_time_millis = 4;

  message Response {
    oneof aggregate {
      CountPerNGram count_per_ngram = 1;
      FloatHistogram float_histogram = 2;
      DiscreteHistogram discrete_histogram = 3;
    }
  }
}

// Aggregate Data Storage

message StoreProfiledAggregateBatchRequest {
  ProfiledAggregateBatch batch = 1;

  message Response {
  }
}

// Service definitions
service DataMonitoringService {
  rpc getProfiler(GetProfilerRequest) returns (GetProfilerRequest.Response) {
    option (google.api.http) = {
      get: "/v1/profiler/getProfiler"
    };
  };

  rpc createProfiler(CreateProfilerRequest) returns (CreateProfilerRequest.Response) {
    option (google.api.http) = {
      put: "/v1/profiler/createProfiler"
      body: "*"
    };
  };

  rpc updateProfiler(UpdateProfilerRequest) returns (UpdateProfilerRequest.Response) {
    option (google.api.http) = {
      patch: "/v1/profile/updateProfile"
      body: "*"
    };
  };

  rpc deleteProfiler(DeleteProfilerRequest) returns (DeleteProfilerRequest.Response) {
    option (google.api.http) = {
      delete: "/v1/profile/deleteProfiler"
      body: "*"
    };
  };

  rpc listProfilers(ListProfilersRequest) returns (ListProfilersRequest.Response) {
    option (google.api.http) = {
      get: "/v1/profiler/listProfilers"
    };
  };

  rpc getProfilerInstance(GetProfilerInstanceRequest) returns (GetProfilerInstanceRequest.Response) {
    option (google.api.http) = {
      get: "/v1/profiler-set/getProfilerInstance"
    };
  };

  rpc createProfilerInstance(CreateProfilerInstanceRequest) returns (CreateProfilerInstanceRequest.Response) {
    option (google.api.http) = {
      put: "/v1/profiler-set/createProfilerInstance"
      body: "*"
    };
  };

  rpc updateProfilerInstance(UpdateProfilerInstanceRequest) returns (UpdateProfilerInstanceRequest.Response) {
    option (google.api.http) = {
      patch: "/v1/profile-set/updateProfileSet"
      body: "*"
    };
  };

  rpc deleteProfilerInstance(DeleteProfilerInstanceRequest) returns (DeleteProfilerRequest.Response) {
    option (google.api.http) = {
      delete: "/v1/profile-set/deleteProfilerInstance"
      body: "*"
    };
  };

  rpc listProfilerInstances(ListProfilerInstancesRequest) returns (ListProfilerInstancesRequest.Response) {
    option (google.api.http) = {
      get: "/v1/profiler-set/listProfilersSets"
    };
  };

  rpc getProfiledEntity(GetProfiledEntityRequest) returns (GetProfiledEntityRequest.Response) {
    option (google.api.http) = {
      get: "/v1/profiled-entity/getProfiledEntity"
    };
  };

  rpc createProfiledEntity(CreateProfiledEntityRequest) returns (CreateProfiledEntityRequest.Response) {
    option (google.api.http) = {
      put: "/v1/profiled-entity/createProfiledEntity"
      body: "*"
    };
  };

  rpc updateProfiledEntity(UpdateProfiledEntityRequest) returns (UpdateProfiledEntityRequest.Response) {
    option (google.api.http) = {
      patch: "/v1/profiled-entity/updateProfiledEntity"
      body: "*"
    };
  };

  rpc deleteProfiledEntity(DeleteProfiledEntityRequest) returns (DeleteProfiledEntityRequest.Response) {
    option (google.api.http) = {
      delete: "/v1/profiled-entity/deleteProfiledEntity"
      body: "*"
    };
  };

  rpc listProfiledEntities(ListProfiledEntitiesRequest) returns (ListProfiledEntitiesRequest.Response) {
    option (google.api.http) = {
      get: "/v1/profiled-entity/listProfiledEntities"
    };
  };

  rpc getAggregate(GetAggregateRequest) returns (GetAggregateRequest.Response) {
    option (google.api.http) = {
      get: "/v1/aggregate/getAggregate"
    };
  };

  rpc storeAggregateBatch(StoreProfiledAggregateBatchRequest) returns (StoreProfiledAggregateBatchRequest.Response) {
    option (google.api.http) = {
      put: "/v1/aggregate/storeAggregateBatch"
      body: "*"
    };
  };
}
